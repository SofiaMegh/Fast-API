from fastapi import FastAPI, Path, Query  # Import Query for handling query parameters
from typing import Optional
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    brand: Optional[str] = None

class UpdateItem(BaseModel):
    name: Optional[str] = None
    price: Optional[float] = None
    brand: Optional[str] = None
# Inventory
inventory = {}

@app.get("/get-item/{item_id}")
def get_item(
    item_id: int = Path(..., description="The ID of the item you would like to view", gt=0, lt=1000)
):  # Adjusted lt to allow larger item_id
    item = inventory.get(item_id)
    if item:
        return item
    return {"error": "Item not found"}

@app.get("/get-by-name")
def get_item_by_name(
    name: str = Query(None, title="Name", description="Name of the item", max_length=10, min_length=2)
):
    # Ensure `name` is provided
    if name is None:
        return {"error": "Name query parameter is required"}

    # Iterate over inventory items and compare names (case-insensitive)
    for item_id, item in inventory.items():
        if item["name"].lower() == name.lower():
            return item  # Return the matching item

    return {"Data": "Not found"}  # Moved outside the loop

@app.post("/create-item/{item_id}")
def create_item(item_id: int, item: Item):
    if item_id in inventory:
        return {"Error": "Item ID already exists."}
    inventory[item_id] = item.dict()  # Convert Pydantic model to dictionary
    return inventory[item_id]

@app.put("/update-item/{item_id}")
def update_item(item_id: int, item: UpdateItem):
    if item_id not in inventory:
        return {"Error": "Item ID does not exist."}
    
    if item.name is not None:
        inventory[item_id]["name"] = item.name  # Correct: Access and update the dictionary key

    if item.price is not None:
        inventory[item_id]["price"] = item.price

    if item.brand is not None:
        inventory[item_id]["brand"] = item.brand

    return inventory[item_id]

@app.delete("/delete-item")
def delete_item(item_id: int = Query(..., description="The ID of the item to delete", gt=0)):
    if item_id not in inventory:
        return {"Error": "ID does not exist."}
    
    del inventory[item_id]
    return {"Success": f"Item with ID {item_id} has been deleted"}
